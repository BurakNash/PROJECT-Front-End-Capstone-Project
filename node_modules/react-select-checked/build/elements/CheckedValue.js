"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2017 The Hyve B.V.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This code is licensed under the GNU General Public License,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * version 3, or (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var CheckedValue = function (_React$Component) {
    _inherits(CheckedValue, _React$Component);

    function CheckedValue() {
        _classCallCheck(this, CheckedValue);

        return _possibleConstructorReturn(this, (CheckedValue.__proto__ || Object.getPrototypeOf(CheckedValue)).apply(this, arguments));
    }

    _createClass(CheckedValue, [{
        key: "render",
        value: function render() {
            // extract context passed down by the valueRenderer callback
            var _props$children$ = this.props.children[0],
                valueIndex = _props$children$.valueIndex,
                shouldShowPlaceholder = _props$children$.shouldShowPlaceholder,
                placeholder = _props$children$.placeholder;
            // render the first value as the placeholder would have appeared,
            // display nothing for subsequent values

            return valueIndex === 0 && shouldShowPlaceholder ? _react2.default.createElement(
                "div",
                { className: "Select-placeholder" },
                placeholder
            ) : null;
        }
    }]);

    return CheckedValue;
}(_react2.default.Component);

exports.default = CheckedValue;