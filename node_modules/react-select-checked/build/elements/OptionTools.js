'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2017 The Hyve B.V.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This code is licensed under the GNU General Public License,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * version 3, or (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var OptionTools = function (_React$Component) {
    _inherits(OptionTools, _React$Component);

    function OptionTools(props, context) {
        _classCallCheck(this, OptionTools);

        var _this = _possibleConstructorReturn(this, (OptionTools.__proto__ || Object.getPrototypeOf(OptionTools)).call(this, props, context));

        _this.addAll = _this.addAll.bind(_this);
        _this.clearAll = _this.clearAll.bind(_this);
        return _this;
    }

    _createClass(OptionTools, [{
        key: 'addAll',
        value: function addAll(event) {
            event.preventDefault();
            event.stopPropagation();
            this.props.onAddAll();
        }
    }, {
        key: 'clearAll',
        value: function clearAll(event) {
            event.preventDefault();
            event.stopPropagation();
            this.props.onClearAll();
        }
    }, {
        key: 'render',
        value: function render() {
            var optionToolsStyles = {
                fontColor: 'inherit',
                textAlign: 'center',
                padding: '.5em',
                borderBottom: '1px solid #ccc'
            };
            var toolButtonStyle = {
                borderRadius: '0.3em',
                fontColor: 'inherit',
                backgroundColor: 'white',
                border: '1px solid #ccc',
                padding: '0.5em',
                textAlign: 'center',
                textDecoration: 'none',
                fontSize: 'smaller',
                cursor: 'pointer',
                marginLeft: '0.3em'
            };
            return _react2.default.createElement(
                'div',
                { style: optionToolsStyles },
                _react2.default.createElement(
                    'button',
                    { onClick: this.addAll, style: toolButtonStyle },
                    this.props.addAllTitle,
                    ' (',
                    this.props.filteredOptions,
                    ')'
                ),
                _react2.default.createElement(
                    'button',
                    { onClick: this.clearAll, style: toolButtonStyle },
                    this.props.clearAllTitle
                )
            );
        }
    }]);

    return OptionTools;
}(_react2.default.Component);

OptionTools.propTypes = {
    filteredOptions: _propTypes2.default.number,
    onAddAll: _propTypes2.default.func,
    onClearAll: _propTypes2.default.func,
    addAllTitle: _propTypes2.default.string,
    clearAllTitle: _propTypes2.default.string
};

exports.default = OptionTools;