'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactSelect = require('react-select');

var _reactSelect2 = _interopRequireDefault(_reactSelect);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _CheckedOption = require('./CheckedOption');

var _CheckedOption2 = _interopRequireDefault(_CheckedOption);

var _CheckedValue = require('./CheckedValue');

var _CheckedValue2 = _interopRequireDefault(_CheckedValue);

var _OptionTools = require('./OptionTools');

var _OptionTools2 = _interopRequireDefault(_OptionTools);

var _stripDiacritics = require('./stripDiacritics');

var _stripDiacritics2 = _interopRequireDefault(_stripDiacritics);

require('react-select/dist/react-select.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2017 The Hyve B.V.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This code is licensed under the GNU General Public License,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * version 3, or (at your option) any later version.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var CheckedSelect = function (_React$Component) {
    _inherits(CheckedSelect, _React$Component);

    // constructor
    function CheckedSelect(props, context) {
        _classCallCheck(this, CheckedSelect);

        var _this = _possibleConstructorReturn(this, (CheckedSelect.__proto__ || Object.getPrototypeOf(CheckedSelect)).call(this, props, context));

        _this.handleFilterOptions = _this.handleFilterOptions.bind(_this);
        _this.handleAddAll = _this.handleAddAll.bind(_this);
        _this.handleClearAll = _this.handleClearAll.bind(_this);
        _this.handleSearchInputChange = _this.handleSearchInputChange.bind(_this);
        _this.renderValueContext = _this.renderValueContext.bind(_this);
        _this.renderMenu = _this.renderMenu.bind(_this);
        _this.toggleSelection = _this.toggleSelection.bind(_this);

        _this.state = { shouldShowPlaceholder: true };
        return _this;
    }

    /**
     * Custom filter options when user type filter in input value
     * @param options
     * @param filterValue
     * @param currentValue
     * @returns {*}
     */


    _createClass(CheckedSelect, [{
        key: 'handleFilterOptions',
        value: function handleFilterOptions(options, filterValue, currentValue) {
            var _this2 = this;

            if (this.props.value.length) {
                currentValue = this.props.value;
            }

            if (this.props.ignoreAccents) {
                filterValue = (0, _stripDiacritics2.default)(filterValue);
            }

            if (this.props.ignoreCase) {
                filterValue = filterValue.toLowerCase();
            }

            if (currentValue) currentValue = currentValue.map(function (i) {
                return i[_this2.props.valueKey];
            });
            this._visibleOptions = options.filter(function (option) {

                if (!filterValue) return true;
                var valueTest = String(option[_this2.props.valueKey]);
                var labelTest = String(option[_this2.props.labelKey]);
                if (_this2.props.ignoreAccents) {
                    if (_this2.props.matchProp !== 'label') valueTest = (0, _stripDiacritics2.default)(valueTest);
                    if (_this2.props.matchProp !== 'value') labelTest = (0, _stripDiacritics2.default)(labelTest);
                }
                if (_this2.props.ignoreCase) {
                    if (_this2.props.matchProp !== 'label') valueTest = valueTest.toLowerCase();
                    if (_this2.props.matchProp !== 'value') labelTest = labelTest.toLowerCase();
                }
                return _this2.props.matchPos === 'start' ? _this2.props.matchProp !== 'label' && valueTest.substr(0, filterValue.length) === filterValue || _this2.props.matchProp !== 'value' && labelTest.substr(0, filterValue.length) === filterValue : _this2.props.matchProp !== 'label' && valueTest.indexOf(filterValue) >= 0 || _this2.props.matchProp !== 'value' && labelTest.indexOf(filterValue) >= 0;
            });

            this._visibleOptionValues = this._visibleOptions.reduce(function (map, option) {
                map[option[_this2.props.valueKey]] = true;
                return map;
            }, {});

            return this._visibleOptions;
        }
    }, {
        key: 'addVisibleOptions',
        value: function addVisibleOptions() {
            var _this3 = this;

            var values = this.props.value;
            var valueStrings = values.reduce(function (map, valueObject) {
                map[valueObject[_this3.props.valueKey]] = true;
                return map;
            }, {});

            // Add currently visible, enabled options to
            // the already-selected ones
            var optionsToAdd = this._visibleOptions.filter(function (optionObject) {
                return !optionObject.disabled && !valueStrings[optionObject[_this3.props.valueKey]];
            });
            return values.concat(optionsToAdd);
        }
    }, {
        key: 'clearVisibleOptions',
        value: function clearVisibleOptions() {
            var _this4 = this;

            var visibleOptionValues = this._visibleOptionValues;
            var values = this.props.value;
            // remove all visible values, keeping only invisible ones
            return values.filter(function (valueObject) {
                return !visibleOptionValues[valueObject[_this4.props.valueKey]];
            });
        }
    }, {
        key: 'setValue',
        value: function setValue(value) {
            var _this5 = this;

            if (this.props.simpleValue && value) {
                value = this.props.multi ? value.map(function (i) {
                    return i[_this5.props.valueKey];
                }).join(this.props.delimiter) : value[this.props.valueKey];
            }
            this.props.onChange(value);
        }

        /**
         * Add all enabled visible options to the selection
         */

    }, {
        key: 'handleAddAll',
        value: function handleAddAll() {
            var newValue = this.addVisibleOptions();
            this.setValue(newValue);
        }

        /**
         * Clear all visible options from the selection
         */

    }, {
        key: 'handleClearAll',
        value: function handleClearAll() {
            var newValue = this.clearVisibleOptions();
            this.setValue(newValue);
        }

        /**
         * Update state to typing in the search box, leaving the input untouched
         */

    }, {
        key: 'handleSearchInputChange',
        value: function handleSearchInputChange(inputString) {
            this.setState({ shouldShowPlaceholder: inputString === '' });
            return inputString;
        }

        /**
        * valueRenderer callback that gathers context to render the value component
        */

    }, {
        key: 'renderValueContext',
        value: function renderValueContext(__, valueIndex) {
            return {
                valueIndex: valueIndex,
                shouldShowPlaceholder: this.state.shouldShowPlaceholder,
                placeholder: this.props.placeholder
            };
        }
    }, {
        key: 'renderOptions',
        value: function renderOptions(_ref) {
            var _this6 = this;

            var focusedOption = _ref.focusedOption,
                onFocus = _ref.onFocus,
                onSelect = _ref.onSelect,
                optionClassName = _ref.optionClassName,
                optionComponent = _ref.optionComponent,
                options = _ref.options,
                valueArray = _ref.valueArray,
                valueKey = _ref.valueKey;

            var Option = optionComponent;
            return options.map(function (option, i) {
                var isSelected = _this6.props.value.some(function (selectedOption) {
                    return selectedOption[valueKey] === option[valueKey];
                });
                var isFocused = focusedOption && option[valueKey] === focusedOption[valueKey];
                var optionClass = (0, _classnames2.default)(optionClassName, {
                    'Select-option': true,
                    'is-selected': isSelected,
                    'is-focused': isFocused,
                    'is-disabled': option.disabled
                });

                return _react2.default.createElement(
                    'div',
                    { key: 'option-' + i + '-' + option[valueKey] },
                    _react2.default.createElement(Option, {
                        className: optionClass,
                        option: option,
                        onFocus: onFocus,
                        onSelect: onSelect,
                        isSelected: isSelected
                    })
                );
            });
        }
    }, {
        key: 'renderMenu',
        value: function renderMenu(params) {

            var props = this.props;
            var filteredOptions = params.options ? params.options.filter(function (option) {
                return !option.disabled;
            }).length : 0;
            var optsContainerStyle = {
                maxHeight: '150px',
                overflow: 'scroll'
            };
            var optionItems = this.renderOptions(params);

            return _react2.default.createElement(
                'div',
                null,
                _react2.default.createElement(_OptionTools2.default, {
                    onAddAll: this.handleAddAll,
                    onClearAll: this.handleClearAll,
                    addAllTitle: props.addAllTitle,
                    clearAllTitle: props.clearAllTitle,
                    filteredOptions: filteredOptions
                }),
                _react2.default.createElement(
                    'div',
                    { style: optsContainerStyle },
                    optionItems
                )
            );
        }

        /**
         * Select option when it is not selected and the other way around.
         * @param selectedValue
         */

    }, {
        key: 'toggleSelection',
        value: function toggleSelection(selectedValue) {
            var latestSelected = selectedValue[selectedValue.length - 1];

            var toggleItem = latestSelected && this.props.value.find(function (val) {
                return val.value === latestSelected.value;
            });
            if (toggleItem) {
                selectedValue = this.props.value.filter(function (val) {
                    return val.value !== toggleItem.value;
                });
            }
            this._visibleOptions.forEach(function (option) {
                option.isSelected = selectedValue.value === option.value;
            });
            this.setValue(selectedValue);
        }
    }, {
        key: 'getSelectComponent',
        value: function getSelectComponent() {
            return _react2.default.createElement(_reactSelect2.default, {
                options: this.props.options,
                value: this.props.value,
                onChange: this.toggleSelection,
                closeOnSelect: false,
                onSelectResetsInput: false,
                disabled: this.props.disabled,
                multi: true,
                menuRenderer: this.renderMenu,
                backspaceRemoves: false,
                clearable: false,
                optionComponent: _CheckedOption2.default,
                valueComponent: _CheckedValue2.default,
                valueRenderer: this.renderValueContext,
                onInputChange: this.handleSearchInputChange,
                filterOptions: this.handleFilterOptions,
                placeholder: this.props.placeholder,
                noResultsText: this.props.noResultsText
            });
        }
    }, {
        key: 'getSelectAsyncComponent',
        value: function getSelectAsyncComponent() {
            return _react2.default.createElement(_reactSelect2.default.Async, {
                loadOptions: this.props.loadOptions,
                cache: this.props.cache,
                value: this.props.value,
                onChange: this.props.onChange,
                closeOnSelect: false,
                onSelectResetsInput: false,
                disabled: this.props.disabled,
                multi: true,
                menuRenderer: this.renderMenu,
                backspaceRemoves: false,
                clearable: false,
                optionComponent: _CheckedOption2.default,
                valueComponent: _CheckedValue2.default,
                valueRenderer: this.renderValueContext,
                onInputChange: this.handleSearchInputChange,
                filterOptions: this.handleFilterOptions,
                placeholder: this.props.placeholder,
                noResultsText: this.props.noResultsText
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return this.props.async ? this.getSelectAsyncComponent() : this.getSelectComponent();
        }
    }]);

    return CheckedSelect;
}(_react2.default.Component);

CheckedSelect.propTypes = {
    addAllTitle: _propTypes2.default.string,
    async: _propTypes2.default.bool,
    cache: _propTypes2.default.any,
    clearAllTitle: _propTypes2.default.string,
    disabled: _propTypes2.default.bool,
    ignoreAccents: _propTypes2.default.bool,
    ignoreCase: _propTypes2.default.bool,
    loadOptions: _propTypes2.default.func,
    matchPos: _propTypes2.default.string,
    matchProp: _propTypes2.default.string,
    onChange: _propTypes2.default.func,
    options: _propTypes2.default.array,
    placeholder: _propTypes2.default.string,
    value: _propTypes2.default.any,
    valueKey: _propTypes2.default.string
};

CheckedSelect.defaultProps = {
    addAllTitle: 'Add all',
    async: false,
    cache: {},
    clearAllTitle: 'Clear',
    disabled: false,
    ignoreAccents: true,
    ignoreCase: true,
    label: '',
    matchPos: 'any',
    matchProp: 'any',
    options: [],
    placeholder: 'Please select ..',
    valueKey: 'value'
};

exports.default = CheckedSelect;